generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Reward {
  id    String  @id @default(uuid()) @db.Uuid
  name  String
  description String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  imageCollection String[]
  cost Int
  isRedeemed Boolean @default(false)
  redeemedAt DateTime?
 
  @@index([isRedeemed])
}

enum PointsType {
  POSITIVE
  NEGATIVE
}

model Identity {
  id String @id @default(uuid()) @db.Uuid
  name String
  description String
  requiredPoints Int
  isActive Boolean @default(true)
  createdAt DateTime @default(now())
  Task Task[]
 
  @@index([isActive])
}

enum TaskType {
  DEFAULT
  COUNTER
}
  
model Task {
  id String @id @default(uuid()) @db.Uuid
  name String
  taskType TaskType @default(DEFAULT)
  isFavorited Boolean @default(false)
  isActive Boolean @default(true)
  isAddedToToday Boolean @default(false)
  isLocked Boolean @default(false)
  isPinned Boolean @default(false)
  sortValue Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  points Int
  pointsType PointsType
  identity Identity @relation(fields: [identityId], references: [id])
  identityId String @db.Uuid
  hasSubTasks Boolean @default(false)
  isSubTask Boolean @default(false)
  SubTask SubTask[]
  
   @@index([isActive])
   @@index([isLocked])
   @@index([isPinned])
   @@index([sortValue])
  // Relations for specialization 
  counterTask CounterTask?
}
 
model CounterTask {
  id        String @id @default(uuid()) @db.Uuid
  taskId    String @unique @db.Uuid
  task      Task   @relation(fields: [taskId], references: [id])
  count     Int    @default(0)
  target    Int    @default(1)
}

model SubTask {
  id String @id @default(uuid()) @db.Uuid
  name String
  isActive Boolean @default(false)
  isAddedToToday Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parentTaskId String @db.Uuid
  parentTask Task @relation(fields: [parentTaskId], references: [id])
  
  @@index([isActive])
  @@index([parentTaskId])
}
